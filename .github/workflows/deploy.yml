name: Deploy to Azure VM

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
            
      - name: Setup known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SERVER_IP }} >> ~/.ssh/known_hosts
      
      - name: Deploy to VM
        run: |
          echo "Starting deployment process..."
          
          # Debug: Check if the target directory exists before rsync
          echo "Checking if target directory exists on the server..."
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.PROD_SERVER_IP }} '
            if [ -d "/home/${{ secrets.SERVER_USERNAME }}/seteliplaceholder" ]; then
              echo "Target directory exists."
            else
              echo "Target directory does not exist. Creating it..."
              mkdir -p /home/${{ secrets.SERVER_USERNAME }}/seteliplaceholder
            fi
          '
          
          # Rsync the project files to the server
          echo "Running rsync to copy project files to the server..."
          rsync -avz --exclude ".git" --exclude "venv" --exclude "__pycache__" ./ ${{ secrets.SERVER_USERNAME }}@${{ secrets.PROD_SERVER_IP }}:/home/${{ secrets.SERVER_USERNAME }}/seteliplaceholder/
          
          # Debug: Verify files on the server after rsync
          echo "Verifying files on the server after rsync..."
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.PROD_SERVER_IP }} '
            echo "Listing files in the target directory:"
            ls -la /home/${{ secrets.SERVER_USERNAME }}/seteliplaceholder
          '
          
          # Connect to the server and run setup commands
          echo "Connecting to the server to run setup commands..."
          ssh ${{ secrets.SERVER_USERNAME }}@${{ secrets.PROD_SERVER_IP }} <<'EOF'
            echo "Checking if virtual environment exists..."
            if [ ! -d "/home/${{ secrets.SERVER_USERNAME }}/seteliplaceholder/venv" ]; then
              echo "Virtual environment not found. Creating it..."
              cd /home/${{ secrets.SERVER_USERNAME }}/seteliplaceholder
              python3 -m venv venv
            else
              echo "Virtual environment already exists."
            fi
            
            echo "Installing/updating dependencies..."
            cd /home/${{ secrets.SERVER_USERNAME }}/seteliplaceholder
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            
            echo "Copying systemd service file if needed..."
            sudo cp /home/${{ secrets.SERVER_USERNAME }}/seteliplaceholder/seteliplaceholder.service /etc/systemd/system/
            
            echo "Copying nginx config if needed..."
            sudo cp /home/${{ secrets.SERVER_USERNAME }}/seteliplaceholder/nginx_seteli.conf /etc/nginx/sites-available/seteli.gona.fi
            
            echo "Creating symlink for nginx config if it doesn't exist..."
            if [ ! -f "/etc/nginx/sites-enabled/seteli.gona.fi" ]; then
              sudo ln -s /etc/nginx/sites-available/seteli.gona.fi /etc/nginx/sites-enabled/
            fi
            
            echo "Reloading systemd and restarting services..."
            sudo systemctl daemon-reload
            sudo systemctl enable seteliplaceholder.service
            sudo systemctl restart seteliplaceholder.service
            
            echo "Testing nginx configuration and reloading..."
            sudo nginx -t && sudo systemctl reload nginx
            
            echo "Checking if SSL is set up with Certbot..."
            if [ ! -d "/etc/letsencrypt/live/seteli.gona.fi" ]; then
              echo "SSL not found. Setting up SSL with Certbot..."
              sudo apt-get update
              sudo apt-get install -y certbot python3-certbot-nginx
              sudo certbot --nginx -d seteli.gona.fi --non-interactive --agree-tos -m miska@miskakyto.fi
            else
              echo "SSL already set up."
            fi
EOF